pub struct Counter {
	id: &'static str,
}
impl Counter {
	pub fn spark(&self) {
		evscode::telemetry(self.id, &[], &[])
	}

	pub fn spark_with(&self, metrics: &Metrics) {
		evscode::telemetry(self.id, metrics.properties, metrics.measurements)
	}

	pub const fn new(id: &'static str) -> Counter {
		Counter { id }
	}
}

pub struct Metrics<'a> {
	pub properties: &'a [(&'a str, &'a str)],
	pub measurements: &'a [(&'a str, f64)],
}

pub struct Events {
	pub auth_ask: Counter,
	pub auth_reset_from_url: Counter,
	pub auth_reset_from_list: Counter,
	pub checker_exists: Counter,
	pub clang_install: Counter,
	pub clang_not_installed: Counter,
	pub compile: Counter,
	pub compile_manual: Counter,
	pub debug_gdb: Counter,
	pub debug_rr: Counter,
	pub gdb_install: Counter,
	pub gdb_not_installed: Counter,
	pub launch_nearby: Counter,
	pub launch_web_contest: Counter,
	pub launch_web_task: Counter,
	pub mingw_install: Counter,
	pub mingw_not_installed: Counter,
	pub newsletter_show: Counter,
	pub newsletter_changelog: Counter,
	pub newsletter_dismiss: Counter,
	pub open_countdown: Counter,
	pub open_countdown_ok: Counter,
	pub open_scan: Counter,
	pub open_scan_ok: Counter,
	pub open_url: Counter,
	pub open_url_contest: Counter,
	pub open_url_task: Counter,
	pub paste_qistruct: Counter,
	pub paste_quick: Counter,
	pub paste_quick_ok: Counter,
	pub rr_install: Counter,
	pub rr_not_installed: Counter,
	pub statement: Counter,
	pub statement_html: Counter,
	pub statement_pdf: Counter,
	pub stress_start: Counter,
	pub submit_f12: Counter,
	pub submit_send: Counter,
	pub submit_notest: Counter,
	pub submit_failtest: Counter,
	pub template_configure: Counter,
	pub template_instantiate: Counter,
	pub template_solution: Counter,
	pub template_solution_custom: Counter,
	pub term_install: Counter,
	pub test_add: Counter,
	pub test_alt0: Counter,
	pub test_alternative_add: Counter,
	pub test_alternative_delete: Counter,
	pub test_current: Counter,
	pub test_edit: Counter,
	pub test_eval: Counter,
	pub test_input: Counter,
	pub test_run: Counter,
}

pub const TELEMETRY: Events = Events {
	auth_ask: Counter::new("action.auth_ask"),
	auth_reset_from_url: Counter::new("action.auth_reset_from_url"),
	auth_reset_from_list: Counter::new("action.auth_reset_from_list"),
	checker_exists: Counter::new("action.checker_exists"),
	clang_install: Counter::new("service.clang.install"),
	clang_not_installed: Counter::new("service.clang.not_installed"),
	compile: Counter::new("action.compile"),
	compile_manual: Counter::new("action.compile_manual"),
	debug_gdb: Counter::new("action.debug_gdb"),
	debug_rr: Counter::new("action.debug_rr"),
	gdb_install: Counter::new("service.gdb.install"),
	gdb_not_installed: Counter::new("service.gdb.not_installed"),
	launch_nearby: Counter::new("action.launch_nearby"),
	launch_web_contest: Counter::new("action.launch_web_contest"),
	launch_web_task: Counter::new("action.launch_web_task"),
	mingw_install: Counter::new("service.mingw.install"),
	mingw_not_installed: Counter::new("service.mingw.not_installed"),
	newsletter_show: Counter::new("action.newsletter_show"),
	newsletter_changelog: Counter::new("action.newsletter_changelog"),
	newsletter_dismiss: Counter::new("action.newsletter_dismiss"),
	open_countdown: Counter::new("action.open_countdown"),
	open_countdown_ok: Counter::new("action.open_countdown_ok"),
	open_scan: Counter::new("action.open_scan"),
	open_scan_ok: Counter::new("action.open_scan_ok"),
	open_url: Counter::new("action.open_url"),
	open_url_contest: Counter::new("action.open_url_contest"),
	open_url_task: Counter::new("action.open_url_task"),
	paste_qistruct: Counter::new("action.paste_qistruct"),
	paste_quick: Counter::new("action.paste_quick"),
	paste_quick_ok: Counter::new("action.paste_quick_ok"),
	rr_install: Counter::new("service.rr.install"),
	rr_not_installed: Counter::new("service.rr.not_installed"),
	statement: Counter::new("action.statement"),
	statement_html: Counter::new("action.statement_html"),
	statement_pdf: Counter::new("action.statement_pdf"),
	stress_start: Counter::new("action.stress_start"),
	submit_f12: Counter::new("action.submit_f12"),
	submit_send: Counter::new("action.submit_send"),
	submit_notest: Counter::new("action.submit_notests"),
	submit_failtest: Counter::new("action.submit_failtest"),
	template_configure: Counter::new("action.template_configure"),
	template_instantiate: Counter::new("action.template_instantiate"),
	template_solution: Counter::new("action.template_solution"),
	template_solution_custom: Counter::new("action.template_solution_custom"),
	term_install: Counter::new("action.term_install"),
	test_add: Counter::new("action.test_add"),
	test_alt0: Counter::new("action.test_alt0"),
	test_alternative_add: Counter::new("action.test_alternative_add"),
	test_alternative_delete: Counter::new("action.test_alternative_delete"),
	test_current: Counter::new("action.test_current"),
	test_edit: Counter::new("action.test_edit"),
	test_eval: Counter::new("action.test_eval"),
	test_input: Counter::new("action.test_input"),
	test_run: Counter::new("action.test_run"),
};
